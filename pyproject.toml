[project]
name = "dragonfly-logging-config"
version = "0.1.0"
description = "Shared logging configuration for Dragonfly codebases"
authors = [
    { name = "Vipyr Security", email = "support@vipyrsec.com" },
]
dependencies = [
    "structlog>=24.1.0",
    "structlog-sentry>=2.1.0",
    "fastapi>=0.110.0",
    "asgi-correlation-id>=4.3.1",
]
requires-python = ">=3.11"
readme = "README.md"
license = { text = "MIT" }

[tool]
[tool.pdm]
[tool.pdm.dev-dependencies]
lint = [
    "pre-commit>=3.6.2",
    "ruff>=0.3.4",
    "pyright>=1.1.355"
]

[tool.pdm.scripts]
format = { shell = "ruff format" }
lint = { shell = "pyright; ruff check ." }
pre-commit = { shell = "pre-commit run --all-files" }

[tool.ruff]
line-length = 120

[tool.pyright]
include = ["src/**/*.py"]

venvPath = "."
venv = ".venv"

strictListInference = true
strictDictionaryInference = true
strictSetInference = true
analyzeUnannotatedFunctions = true
strictParameterNoneValue = true
enableTypeIgnoreComments = true
reportMissingModuleSource = "warning"
reportMissingImports = "error"
reportUndefinedVariable = "error"
reportAssertAlwaysTrue = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidTypeVarUse = "error"
reportMissingTypeStubs = "none"
reportSelfClsParameterName = "error"
reportUnsupportedDunderAll = "error"
reportUnusedExpression = "error"
reportWildcardImportFromLibrary = "error"
reportGeneralTypeIssues = "error"
reportOptionalSubscript = "error"
reportOptionalMemberAccess = "error"
reportOptionalCall = "error"
reportOptionalIterable = "error"
reportOptionalContextManager = "error"
reportOptionalOperand = "error"
reportTypedDictNotRequiredAccess = "error"
reportPrivateImportUsage = "error"
reportUnboundVariable = "error"
reportUnusedCoroutine = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStubStatement = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportMissingTypeArgument = "error"
reportOverlappingOverload = "error"
reportPrivateUsage = "error"
reportTypeCommentUsage = "error"
reportUnknownArgumentType = "error"
reportUnknownLambdaType = "error"
reportUnknownMemberType = "error"
reportUnknownParameterType = "error"
reportUnknownVariableType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryComparison = "error"
reportUnnecessaryContains = "error"
reportUnnecessaryIsInstance = "error"
reportUnusedClass = "error"
reportUnusedImport = "error"
reportUnusedFunction = "error"
reportUnusedVariable = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
